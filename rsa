#!/usr/bin/python3

import time
import math
import sys

def is_square(x):
    sqrt_x = int(math.sqrt(x))
    return sqrt_x * sqrt_x == x

def quadratic_sieve(n):
    # Step 1: Choose smoothness bound B and initialize variables
    B = 1000
    x = int(math.sqrt(n)) + 1
    y_squared = x * x - n

    while not is_square(y_squared):
        x += 1
        y_squared = x * x - n

    y = int(math.sqrt(y_squared))

    # Step 2: Build the matrix
    matrix = []
    for i in range(B):
        xi = x + i
        ai = (xi + y) % n
        bi = (xi - y) % n
        matrix.append((xi, ai, bi))

    # Step 3: Gaussian elimination to find non-trivial solution
    for i in range(B):
        for j in range(B):
            xi, ai, bi = matrix[i]
            xj, aj, bj = matrix[j]
            if i != j and (ai == aj or ai == bj or bi == aj or bi == bj):
                matrix[i] = None
                matrix[j] = None

    matrix = [entry for entry in matrix if entry is not None]

    # Step 4: Check if we found a non-trivial solution
    if len(matrix) > 0:
        x, a, b = matrix[0]
        p = math.gcd(a - b, n)
        q = n // p
        return p, q

    return None, None

def main():
    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python rsa_factorize.py <file>")
        return

    file_path = sys.argv[1]

    start_time = time.time()
    try:
        with open(file_path, 'r') as file:
            # Read the first line of the file and convert it to an integer
            number = int(file.readline().strip())

        # Factorize the number using Quadratic Sieve
        p, q = quadratic_sieve(number)

        if p is not None and q is not None:
            print(f"{number}={p}*{q}")
        else:
            print(f"Factorization failed for {number}")

        if time.time() - start_time > 5:
            print("Time limit exceeded")
            exit()

    except FileNotFoundError:
        print(f"File '{file_path}' not found.")


if __name__ == '__main__':
    main()
